Given a non-empty array of non-negative integers nums, the degree of this array is defined as the maximum frequency of any one of its elements.

Your task is to find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums.

 

Example 1:

Input: nums = [1,2,2,3,1]
Output: 2
Explanation: 
The input array has a degree of 2 because both elements 1 and 2 appear twice.
Of the subarrays that have the same degree:
[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]
The shortest length is 2. So return 2.
Example 2:

Input: nums = [1,2,2,3,1,4,2]
Output: 6
Explanation: 
The degree is 3 because the element 2 is repeated 3 times.
So [2,2,3,1,4,2] is the shortest subarray, therefore returning 6.
 

Constraints:

nums.length will be between 1 and 50,000.
nums[i] will be an integer between 0 and 49,999.






***********************************************
class Solution {
public:
    int findShortestSubArray(vector<int>& nums) {
        
        unordered_map<int,int>m;

        for(int i = 0;i<nums.size();i++) m[nums[i]]++;

        int max1 = 0;
         
        

        for(auto it:m)
        {
            // cout<<it.first<<" "<<it.second<<endl;
             max1 = max(max1,it.second);
        }
       
       vector<int>v;
        
         for(auto it:m)
         {
             if(it.second == max1)
             {
                 v.push_back(it.first);
             }
         }

       
        
         
      vector<int>left;
       for(int j = 0;j<v.size();j++)
       {
            int p = 0;
           int num = v[j];
          for(int i = 0;i<nums.size();i++)
          {
              if(nums[i] == num)
              {
                  p = i;
                  break;
              }
              
          }
         
           left.push_back(p);
       }  
           
          vector<int>right;

          for(int j = 0;j<v.size();j++)
          {
             int p = 0;
             int num = v[j];
          for(int i = nums.size()-1;i>=0;i--)
          {
              if(nums[i] == num)
              {
                  p = i;
                  break;
              }
           }
               
               right.push_back(p);
          }
         
         int ans = INT_MAX;

         for(int i = 0;i<right.size();i++) cout<<left[i]<<" "<<right[i]<<endl;

         for(int i = 0;i<left.size();i++)
         {
             int a = abs(left[i] - right[i])+1;
             ans = min(ans,a);
         }

         return ans;
        
    }
};
