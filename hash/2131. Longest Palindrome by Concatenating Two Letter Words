You are given an array of strings words. Each element of words consists of two lowercase English letters.

Create the longest possible palindrome by selecting some elements from words and concatenating them in any order. Each element can be selected at most once.

Return the length of the longest palindrome that you can create. If it is impossible to create any palindrome, return 0.

A palindrome is a string that reads the same forward and backward.

 

Example 1:

Input: words = ["lc","cl","gg"]
Output: 6
Explanation: One longest palindrome is "lc" + "gg" + "cl" = "lcggcl", of length 6.
Note that "clgglc" is another longest palindrome that can be created.
Example 2:

Input: words = ["ab","ty","yt","lc","cl","ab"]
Output: 8
Explanation: One longest palindrome is "ty" + "lc" + "cl" + "yt" = "tylcclyt", of length 8.
Note that "lcyttycl" is another longest palindrome that can be created.
Example 3:

Input: words = ["cc","ll","xx"]
Output: 2
Explanation: One longest palindrome is "cc", of length 2.
Note that "ll" is another longest palindrome that can be created, and so is "xx".
 

Constraints:

1 <= words.length <= 105
words[i].length == 2
words[i] consists of lowercase English letters.






*****************************************************************
class Solution {
public:
    int longestPalindrome(vector<string>& words) {
        
       int res = 0;
       unordered_map<string,int> hm; 
       
       for(string s:words){ // match to make pairs that can be taken in palindrome
           string p = s;
           reverse(p.begin(),p.end());
           if(hm[p]>0){ // reverse of current string found, these 2 strings can be added to palindrome 
               res+= 4;
               hm[p]--;  // remove occurence of string as we used it for palindrome
           }
           else{
               hm[s]++;   // reverse not fount , put it in hashmap
           }
       }
         //***** to take element at the center with both letters same
       for(auto i:hm){   // only strings with frequency 1 are left now  
           if(i.first[0]==i.first[1] && i.second>0){ // to place in center of palindrome we needs chars to be same
               return res+2;   
           }
       }

       return res;

    }
};
