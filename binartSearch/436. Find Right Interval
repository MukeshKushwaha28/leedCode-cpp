You are given an array of intervals, where intervals[i] = [starti, endi] and each starti is unique.

The right interval for an interval i is an interval j such that startj >= endi and startj is minimized. Note that i may equal j.

Return an array of right interval indices for each interval i. If no right interval exists for interval i, then put -1 at index i.

 

Example 1:

Input: intervals = [[1,2]]
Output: [-1]
Explanation: There is only one interval in the collection, so it outputs -1.
Example 2:

Input: intervals = [[3,4],[2,3],[1,2]]
Output: [-1,0,1]
Explanation: There is no right interval for [3,4].
The right interval for [2,3] is [3,4] since start0 = 3 is the smallest start that is >= end1 = 3.
The right interval for [1,2] is [2,3] since start1 = 2 is the smallest start that is >= end2 = 2.
Example 3:

Input: intervals = [[1,4],[2,3],[3,4]]
Output: [-1,2,-1]
Explanation: There is no right interval for [1,4] and [3,4].
The right interval for [2,3] is [3,4] since start2 = 3 is the smallest start that is >= end1 = 3.
 

Constraints:

1 <= intervals.length <= 2 * 104
intervals[i].length == 2
-106 <= starti <= endi <= 106
The start point of each interval is unique.





*****************************************************
class Solution {
public:
    
    int binarySearch(vector<pair<int,int>>&inv, int end)
    {
        int lo = 0, hi=inv.size()-1;
        int ans=-1;
        while(lo<=hi)
        {
            int mid = lo+(hi-lo)/2;
            if(inv[mid].first >= end){
                ans = inv[mid].second; // index
                hi = mid-1;
            }
            else{
                lo = mid+1;
            }
        }
        return ans;
    }
    
    vector<int> findRightInterval(vector<vector<int>>& intervals) 
    {

         if(intervals.size()==1)
         {
             if(intervals[0][0] ==intervals[0][1])
               return {0};
         }

        int n=intervals.size();
        if(n==1) return {-1};
        vector<pair<int, int>>inv;
        
        for(int i=0;i<intervals.size();i++){
            inv.push_back({intervals[i][0], i});
        }
        
        sort(inv.begin(), inv.end()); // sort on the basis of start
        vector<int>ans(n,-1);
        
        int i=0;
        for(auto &x : intervals)
        {
            int end = x[1];
            int idx  = binarySearch(inv, end);
            ans[i++] = idx; 
        }
        return ans;
    }
};
