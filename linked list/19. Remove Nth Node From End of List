Given the head of a linked list, remove the nth node from the end of the list and return its head.

 

Example 1:


Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]
Example 2:

Input: head = [1], n = 1
Output: []
Example 3:

Input: head = [1,2], n = 1
Output: [1]
 

Constraints:

The number of nodes in the list is sz.
1 <= sz <= 30
0 <= Node.val <= 100
1 <= n <= sz



************************************************************************************************
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:

        int length(ListNode * head)
        {
            int l = 0;
            ListNode * temp = head;

            while(temp != NULL)
            {
                l++;
                temp = temp->next;
            }

            return l;
        }

    ListNode* removeNthFromEnd(ListNode* head, int n) {
        

        if(head == NULL )
          return head;
            
           

            int m = length(head);
            
            if(m==1 && n==1)
                return NULL;

             if(m == n){
               head = head->next;
               return head; 
             }  
            
            if(n==0)
              return head;
            
           m = m-n;

          ListNode * temp = head;

          while(m!=1  && temp)
          {
              temp = temp->next;
              m--;
          }

          if(temp && temp->next != NULL)
          {
              temp->next = temp->next->next;
          }

          return head;
    }
};
