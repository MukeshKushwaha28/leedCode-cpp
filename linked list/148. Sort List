Given the head of a linked list, return the list after sorting it in ascending order.

 

Example 1:


Input: head = [4,2,1,3]
Output: [1,2,3,4]
Example 2:


Input: head = [-1,5,3,4,0]
Output: [-1,0,3,4,5]
Example 3:

Input: head = []
Output: []
 

Constraints:

The number of nodes in the list is in the range [0, 5 * 104].
-105 <= Node.val <= 105
 
 
 
 
 
 ***********************************************************************************
 
 /**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:

   ListNode * merge(ListNode * l1,ListNode * l2)
   {
       if(l1 == NULL)
         return l2;

         if(l2== NULL)
          return l1;

          if(l1->val<l2->val)
          {
              l1->next = merge(l1->next,l2);
              return l1;
          }
          else
          {
              l2->next = merge(l1,l2->next);
              return l2;
          }
   }

    ListNode* sortList(ListNode* head) {
        
        
        
        if(head == NULL || head->next == NULL)
          return head;

          ListNode * temp = NULL;
          ListNode * slow = head;
          ListNode * fast = head;

          while(fast != NULL && fast->next != NULL)
          {
              temp = slow;
              slow = slow->next;
              fast = fast->next->next;
          }

          temp->next = NULL;

          ListNode* l1 = sortList(head);
          ListNode *l2 = sortList(slow);

          return merge(l1,l2);
          

        
    }
};
