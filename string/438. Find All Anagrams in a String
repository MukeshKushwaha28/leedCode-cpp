Given two strings s and p, return an array of all the start indices of p's anagrams in s. You may return the answer in any order.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

 

Example 1:

Input: s = "cbaebabacd", p = "abc"
Output: [0,6]
Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
Example 2:

Input: s = "abab", p = "ab"
Output: [0,1,2]
Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".
 

Constraints:

1 <= s.length, p.length <= 3 * 104
s and p consist of lowercase English letters.




*************************************************************
class Solution {
public:
    vector<int> findAnagrams(string s, string p) {
        
        vector<int>ans;

        if(s.size()<p.size()) return ans;

        vector<int> v1(26,0);
        vector<int>v2(26,0);

        for(auto ch:p)
        {
            v1[ch-'a']++;
        }

        int i = 0;
        int j = 0;

        while(j<s.size())
        {
            v2[s[j]-'a']++;
            if(j-i+1 == p.size())
            {
                 if(v1== v2)
                   ans.push_back(i);
            }

            if(j-i+1 <p.size())  j++;
            else
            {
                v2[s[i]-'a']--;
                i++;
                j++;
            }
              
        }

        return ans;
    }
};


