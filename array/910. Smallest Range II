You are given an integer array nums and an integer k.

For each index i where 0 <= i < nums.length, change nums[i] to be either nums[i] + k or nums[i] - k.

The score of nums is the difference between the maximum and minimum elements in nums.

Return the minimum score of nums after changing the values at each index.

 

Example 1:

Input: nums = [1], k = 0
Output: 0
Explanation: The score is max(nums) - min(nums) = 1 - 1 = 0.
Example 2:

Input: nums = [0,10], k = 2
Output: 6
Explanation: Change nums to be [2, 8]. The score is max(nums) - min(nums) = 8 - 2 = 6.
Example 3:

Input: nums = [1,3,6], k = 3
Output: 3
Explanation: Change nums to be [4, 6, 3]. The score is max(nums) - min(nums) = 6 - 3 = 3.
 

Constraints:

1 <= nums.length <= 104
0 <= nums[i] <= 104
0 <= k <= 104




******************************************************************
class Solution {
public:
    int smallestRangeII(vector<int>& A, int k) {
        
         int n=A.size();
        if(n==1) return 0;
        sort(A.begin(),A.end());
        
        int ans=A[n-1]-A[0];
    
        ans=min(ans,max(A[0]+k,A[n-1]-k)-min(A[0]+k,A[1]-k));
        for(int i=1;i<n-1;i++){
           
            int mx=max(A[i]+k,A[n-1]-k);
            int mn=min(A[0]+k,A[i+1]-k);
            
            ans=min(ans,mx-mn);
        }
        
        return ans;
    }
};
