Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

 

Example 1:

Input: nums = [3,2,3]
Output: 3
Example 2:

Input: nums = [2,2,1,1,1,2,2]
Output: 2
 

Constraints:

n == nums.length
1 <= n <= 5 * 104
-109 <= nums[i] <= 109
 
 
 
 
 *************************************************************************************************************
 
 class Solution {
public:
    int majorityElement(vector<int>& nums) {
        
        int c = 0; 
        int res = 0;
        int n = nums.size();

        for(int i = 0;i<n;i++)
        {
            if(c==0){
            res = nums[i];
            }
            if(res == nums[i]){
            c++;
            }
            else{
            c--;
            }
        }

        c  = 0;
        for (int i = 0;i<n;i++)
        {
            if(nums[i] == res){
            c++;
            }
        }
      
        if(c>n/2)
        return res;
    
        // unordered_map<int, int> counter;
        // for (int num : nums) {
        //     if (++counter[num] > nums.size() / 2) {
        //         return num;
        //     }
        // }
        return 0;
        
    }
};
