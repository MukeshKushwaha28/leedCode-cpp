There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1
Example 3:

Input: nums = [1], target = 0
Output: -1
 

Constraints:

1 <= nums.length <= 5000
-104 <= nums[i] <= 104
All values of nums are unique.
nums is an ascending array that is possibly rotated.
-104 <= target <= 104




**************************************************************************

class Solution {
public:

    int binarySearch(vector<int>& arr, int l, 
                 int r, int x)
{
    if (r >= l) 
    {
        int mid = l + (r - l) / 2;
  
        // If the element is present at 
        // the middle itself
        if (arr[mid] == x)
            return mid;
  
        // If element is smaller than mid, 
        // then it can only be present in 
        // left subarray
        if (arr[mid] > x)
            return binarySearch(arr, l, 
                                mid - 1, x);
  
        // Else the element can only be 
        // present in right subarray
        return binarySearch(arr, mid + 1, r, x);
    }
  
    // We reach here when element is not
    // present in array
    return -1;
}

    int search(vector<int>& nums, int target) {
        
         

        int n = nums.size();

        if(n==1 && nums[0] == target)
        {
            return 0;
        }

        if(nums[0] == target)
          return 0;

        if((n==1 && nums[0] != target)
        {
            return -1;
        }

        if(nums[n-1] == target)
        {
            return n-1;
        }


        
        int i;
        for( i = 0;i<n-1;i++)
        {
            if(nums[i]>nums[i+1])
            {
                break;
            }
        }

       if(i==n-1)
       {
          int r = binarySearch(nums,0,n-1,target);
            return r;  
       }

        if(target >=nums[n-1] && target<=nums[i])
        {
            int r = binarySearch(nums,0,i,target);
            return r;
        }
        else
        {
            int r = binarySearch(nums,i+1,n-1,target);
            return r;
        }
    }
};
