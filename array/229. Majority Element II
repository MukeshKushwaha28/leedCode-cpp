Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.

 

Example 1:

Input: nums = [3,2,3]
Output: [3]
Example 2:

Input: nums = [1]
Output: [1]
Example 3:

Input: nums = [1,2]
Output: [1,2]
 

Constraints:

1 <= nums.length <= 5 * 104
-109 <= nums[i] <= 109


*******************************************************************************************
class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        
         if(nums.size()==1)
           return nums;

        if(nums.size()<3){
           if(nums[0]==nums[1])
            return {nums[0]};
            else
             return nums;
        }
         

        unordered_map<int,int> m;

        for(int i = 0;i<nums.size();i++) m[nums[i]]++;

        int r = (nums.size())/3;

        vector<int>v;
        for(int i = 0;i<nums.size();i++)
        {
            if(m[nums[i]]>r)
            {
                v.push_back(nums[i]);
                m.erase(nums[i]);
            }
        }

        return v;

    }
};
