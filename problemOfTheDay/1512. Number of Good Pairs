Given an array of integers nums, return the number of good pairs.

A pair (i, j) is called good if nums[i] == nums[j] and i < j.

 

Example 1:

Input: nums = [1,2,3,1,1,3]
Output: 4
Explanation: There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.
Example 2:

Input: nums = [1,1,1,1]
Output: 6
Explanation: Each pair in the array are good.
Example 3:

Input: nums = [1,2,3]
Output: 0
 

Constraints:

1 <= nums.length <= 100
1 <= nums[i] <= 100





****************************************************
class Solution {
public:
    int numIdenticalPairs(vector<int>& nums) {
        
        // unordered_map<int,vector<int>>m;

        // for(int i = 0;i<nums.size();i++){
            
        //     vector<int>v = m[nums[i]];
        //     v.push_back(i);
          
        //    m[nums[i]] = v;

        // }
        //  int ans = 0;
        // for(auto a :m){

        //     vector<int>v = a.second;
        //     if(v.size()>=2){
        //         ans = ans + ((v.size() -1)* v.size())/2;
        //     }
        // }
        
        // return ans;


        int count = 0;
        for (int i = 0; i < nums.size(); i++) {
            for (int j = i + 1; j < nums.size(); j++) {
                if (nums[i] == nums[j]) {
                    count++;
                }
            }
        }
        return count;
        
    }
};
