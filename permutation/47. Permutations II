Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.

 

Example 1:

Input: nums = [1,1,2]
Output:
[[1,1,2],
 [1,2,1],
 [2,1,1]]
Example 2:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
 

Constraints:

1 <= nums.length <= 8
-10 <= nums[i] <= 10










**************************************************************************************************

class Solution {
public:



       set<vector<int>> res;
    vector<int> temp;
    vector<vector<int>> ans;


    void helper(vector<int> &nums, vector<bool> &freq)
    {
        if (temp.size() == nums.size())
        {
            res.insert(temp);
            return;
        }

        for (int i = 0; i < nums.size(); i++)
        {
            if (!freq[i])
            {
                freq[i] = true;
                temp.push_back(nums[i]);
                helper(nums, freq);
                temp.pop_back();
                freq[i] = false;
            }
        }
    }

   
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        

        int n = nums.size();
        vector<bool> freq(n, false);
        helper(nums, freq);

       for(auto it:res)
       {
           ans.push_back(it);
       }

       return ans;
    }
};
